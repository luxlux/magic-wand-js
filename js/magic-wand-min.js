// Magic Wand (Fuzzy Selection Tool) for Javascript
//
// The MIT License (MIT)
//
// Copyright (c) 2014, Ryasnoy Paul (ryasnoypaul@gmail.com)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
MagicWand=function(){var r={};return r.floodFill=function(r,t,i,n,a){var o,f,h,s,e,u,d,l,y,x,m=r.data,p=r.width,b=r.height,g=r.bytes,w=-1,M=p+1,X=-1,Y=b+1,c=i*p+t,v=new Uint8Array(p*b),A=new Uint8Array(a||p*b);if(1===A[c])return null;var U=[m[c*=g],m[c+1],m[c+2],m[c+3]],q=[{y:i,left:t-1,right:t+1,dir:1}];do{for(x=!1,f=(s=q.shift()).left+1;f<s.right;f++)if(c=((d=s.y*p)+f)*g,1!==A[d+f]&&!((o=m[c]-U[0])>n||o<-n||(o=m[c+1]-U[1])>n||o<-n||(o=m[c+2]-U[2])>n||o<-n)){for(x=!0,v[d+f]=1,A[d+f]=1,u=f-1;u>-2&&(c=(l=d+u)*g,1!==A[l])&&!((o=m[c]-U[0])>n||o<-n)&&!((o=m[c+1]-U[1])>n||o<-n)&&!((o=m[c+2]-U[2])>n||o<-n);)v[l]=1,A[l]=1,u--;for(e=f+1;e<p+1&&(c=(y=d+e)*g,1!==A[y])&&!((o=m[c]-U[0])>n||o<-n)&&!((o=m[c+1]-U[1])>n||o<-n)&&!((o=m[c+2]-U[2])>n||o<-n);)v[y]=1,A[y]=1,e++;u<M&&(M=u+1),e>w&&(w=e-1),(h=s.y-s.dir)>=-1&&h<=b&&(u<s.left&&q.push({y:h,left:u,right:s.left,dir:-s.dir}),s.right<e&&q.push({y:h,left:s.right,right:e,dir:-s.dir})),(h=s.y+s.dir)>=-1&&h<=b&&u<e&&q.push({y:h,left:u,right:e,dir:s.dir})}x&&(s.y<Y&&(Y=s.y),s.y>X&&(X=s.y))}while(q.length>0);return{data:v,width:r.width,height:r.height,bounds:{minX:M,minY:Y,maxX:w,maxY:X}}},r.gaussBlur=function(r,t){var i,n,a,o,f,h,s,e=2*t+1,u=t*t,d=new Float32Array(e),l=0,y=r.width,x=r.height,m=r.data,p=r.bounds.minX,b=r.bounds.maxX,g=r.bounds.minY,w=r.bounds.maxY;for(i=0;i<t;i++){var M=(t-i)*(t-i),X=Math.exp(-M/(2*u))/(2*Math.PI*u);d[t+i]=d[t-i]=X,l+=2*X}for(i=0;i<e;i++)d[i]/=l;var Y=new Uint8Array(y*x),c=t+y,v=t+x;for(f=g;f<w+1;f++)for(o=p;o<b+1;o++){for(h=0,s=c-o<e?c-o:e,a=(n=f*y+o)-t,i=t-o>0?t-o:0;i<s;i++)h+=m[a+i]*d[i];for(s=v-f<e?v-f:e,a=n-t*y,i=t-f>0?t-f:0;i<s;i++)h+=m[a+i*y]*d[i];Y[n]=h>.5?1:0}return{data:Y,width:y,height:x,bounds:{minX:p,minY:g,maxX:b,maxY:w}}},r.gaussBlurOnlyBorder=function(r,t,i){var n,a,o,f,h,s,e,u,d,l,y=function(r,t,i){var n,a,o,f,h,s,e,u=r.width,d=r.height,l=r.data,y=new Uint8Array(l),x=r.bounds.minX,m=r.bounds.maxX,p=r.bounds.minY,b=r.bounds.maxY,g=u*d,w=new Uint8Array(g),M=[],X=Math.max(x,1),Y=Math.min(m,u-2),c=Math.max(p,1),v=Math.min(b,d-2);if(i&&i.length>0)for(h=0;h<g;h++)1===i[h]&&(y[h]=1);for(f=c;f<v+1;f++)for(n=X;n<Y+1;n++)0!==l[h=f*u+n]&&(s=h+u,e=h-u,0!==y[h+1]&&0!==y[h-1]&&0!==y[s]&&0!==y[s+1]&&0!==y[s-1]&&0!==y[e]&&0!==y[e+1]&&0!==y[e-1]||M.push(h));if(0==x)for(f=p;f<b+1;f++)1===l[f*u]&&M.push(f*u);if(m==u-1)for(f=p;f<b+1;f++)1===l[f*u+m]&&M.push(f*u+m);if(0==p)for(n=x;n<m+1;n++)1===l[n]&&M.push(n);if(b==d-1)for(n=x;n<m+1;n++)1===l[b*u+n]&&M.push(b*u+n);var A,U=[],q=t+u,B=t+d,k=2*t+1;for(g=M.length,o=0;o<g;o++){for(w[h=M[o]]=1,U.push(h),f=(h-(n=h%u))/u,A=q-n<k?q-n:k,s=h-t,a=t-n>0?t-n:0;a<A;a++)0===w[e=s+a]&&(w[e]=1,U.push(e));for(A=B-f<k?B-f:k,s=h-t*u,a=t-f>0?t-f:0;a<A;a++)0===w[e=s+a*u]&&(w[e]=1,U.push(e))}return U}(r,t,i),x=2*t+1,m=2*t*t,p=new Float32Array(x),b=0,g=r.width,w=r.height,M=r.data,X=r.bounds.minX,Y=r.bounds.maxX,c=r.bounds.minY,v=r.bounds.maxY,A=y.length;for(o=0;o<t;o++)a=(t-o)*(t-o),n=Math.exp(-a/m)/Math.PI,p[t+o]=p[t-o]=n,b+=2*n;for(o=0;o<x;o++)p[o]/=b;var U=new Uint8Array(M),q=t+g,B=t+w;for(o=0;o<A;o++){for(d=0,u=((h=y[o])-(e=h%g))/g,l=q-e<x?q-e:x,s=h-t,f=t-e>0?t-e:0;f<l;f++)d+=M[s+f]*p[f];if(d>.5)U[h]=1,e<X&&(X=e),e>Y&&(Y=e),u<c&&(c=u),u>v&&(v=u);else{for(l=B-u<x?B-u:x,s=h-t*g,f=t-u>0?t-u:0;f<l;f++)d+=M[s+f*g]*p[f];d>.5?(U[h]=1,e<X&&(X=e),e>Y&&(Y=e),u<c&&(c=u),u>v&&(v=u)):U[h]=0}}return{data:U,width:g,height:w,bounds:{minX:X,minY:c,maxX:Y,maxY:v}}},r.createBorderMask=function(r){var t,i,n,a,o,f=r.width,h=r.height,s=r.data,e=r.bounds.minX,u=r.bounds.maxX,d=r.bounds.minY,l=r.bounds.maxY,y=u-e+1,x=l-d+1,m=new Uint8Array(y*x),p=Math.max(e,1),b=Math.min(u,f-2),g=Math.max(d,1),w=Math.min(l,h-2);for(i=g;i<w+1;i++)for(t=p;t<b+1;t++)0!==s[n=i*f+t]&&(a=n+f,o=n-f,0!==s[n+1]&&0!==s[n-1]&&0!==s[a]&&0!==s[a+1]&&0!==s[a-1]&&0!==s[o]&&0!==s[o+1]&&0!==s[o-1]||(m[(i-d)*y+(t-e)]=1));if(0==e)for(i=d;i<l+1;i++)1===s[i*f]&&(m[(i-d)*y]=1);if(u==f-1)for(i=d;i<l+1;i++)1===s[i*f+u]&&(m[(i-d)*y+(u-e)]=1);if(0==d)for(t=e;t<u+1;t++)1===s[t]&&(m[t-e]=1);if(l==h-1)for(t=e;t<u+1;t++)1===s[l*f+t]&&(m[(l-d)*y+(t-e)]=1);return{data:m,width:y,height:x,offset:{x:e,y:d}}},r.getBorderIndices=function(r){var t,i,n,a,o,f=r.width,h=r.height,s=r.data,e=[],u=f-1,d=h-1;for(i=1;i<d;i++)for(t=1;t<u;t++)0!==s[n=i*f+t]&&(a=n+f,o=n-f,0!==s[n+1]&&0!==s[n-1]&&0!==s[a]&&0!==s[a+1]&&0!==s[a-1]&&0!==s[o]&&0!==s[o+1]&&0!==s[o-1]||e.push(n));for(i=0;i<h;i++)1===s[i*f]&&e.push(i*f);for(t=0;t<f;t++)1===s[t]&&e.push(t);for(n=f-1,i=0;i<h;i++)1===s[i*f+n]&&e.push(i*f+n);for(n=(h-1)*f,t=0;t<f;t++)1===s[n+t]&&e.push(n+t);return e},r.traceContours=function(r){var t,i,n,a,o,f,h,s,e,u,d,l,y,x,m,p=function(r){var t,i,n=r.width,a=r.data,o=r.bounds.minX,f=r.bounds.maxX,h=r.bounds.minY,s=r.bounds.maxY,e=f-o+3,u=s-h+3,d=new Uint8Array(e*u);for(i=h;i<s+1;i++)for(t=o;t<f+1;t++)1===a[i*n+t]&&(d[(i-h+1)*e+(t-o+1)]=1);return{data:d,width:e,height:u,offset:{x:o-1,y:h-1}}}(r),b=[],g=0,w=p.width,M=2*w,X=p.height,Y=p.data,c=p.offset.x,v=p.offset.y,A=new Uint8Array(Y),U=[[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1],[0,-1],[1,-1]];for(a=1;a<X-1;a++)for(n=1;n<w-1;n++)if(1===Y[o=a*w+n])for(t=-w;t<M;t+=M)if(0===Y[o+t]&&0===A[o+t]){for(g++,h=[],e=(s=t===w)?2:6,l=y=u={x:n,y:a},d=null;;){for(A[l.y*w+l.x]=g,i=0;i<8;i++){if(m=U[e=(e+1)%8],1===Y[f=(x={x:l.x+m[0],y:l.y+m[1]}).y*w+x.x]){A[f]=g;break}A[f]=-1,x=null}if(null===x)break;if(l=x,d){if(y.x===u.x&&y.y===u.y&&l.x===d.x&&l.y===d.y)break}else d=x;h.push({x:y.x+c,y:y.y+v}),y=l,e=(e+4)%8}null!=x&&(h.push({x:u.x+c,y:u.y+v}),b.push({inner:s,label:g,points:h}))}return b},r.simplifyContours=function(r,t,i){var n,a,o,f,h,s,e,u,d,l,y,x,m,p,b,g,w,M,X,Y,c,v=r.length,A=[];for(a=0;a<v;a++)if(h=(f=r[a]).points,(s=f.points.length)<i){for(e=[],o=0;o<s;o++)e.push({x:h[o].x,y:h[o].y});A.push({inner:f.inner,label:f.label,points:e,initialCount:s})}else{u=[0,s-1],d=[{first:0,last:s-1}];do{if(!((l=d.shift()).last<=l.first+1)){for(y=-1,x=l.first,n=l.first+1;n<l.last;n++)X=h[n],Y=h[l.first],c=h[l.last],w=X.x-Y.x,M=X.y-Y.y,p=Math.sqrt(w*w+M*M),w=X.x-c.x,M=X.y-c.y,b=Math.sqrt(w*w+M*M),w=Y.x-c.x,M=Y.y-c.y,g=Math.sqrt(w*w+M*M),(m=p>=Math.sqrt(b*b+g*g)?b:b>=Math.sqrt(p*p+g*g)?p:Math.abs((M*X.x-w*X.y+Y.x*c.y-c.x*Y.y)/g))>y&&(x=n,y=m);y>t&&(u.push(x),d.push({first:l.first,last:x}),d.push({first:x,last:l.last}))}}while(d.length>0);for(e=[],s=u.length,u.sort(function(r,t){return r-t}),o=0;o<s;o++)e.push({x:h[u[o]].x,y:h[u[o]].y});A.push({inner:f.inner,label:f.label,points:e,initialCount:f.points.length})}return A},r}();
